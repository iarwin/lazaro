#!/usr/bin/env python

#external libraries
import os
import platform
import shutil
import subprocess
import sys
import threading
import time

#make sure environment is ok
if platform.system() != 'Linux':
    print("\n[!] this operative system is not supported\n")

    #show writing cursor
    print('\033[?25h')
    sys.exit(1)

utilities_to_test = ['clear', 'nproc', 'make', 'rm', 'tar', 'wget']
utilities_not_found_list = []

for utility in utilities_to_test:
    utility_tested = None

    if utility_tested:
        pass
    else:
        pass
        #utilities_not_found_list.append(utility)

    if utilities_not_found_list:
        utilities_not_found_text = ', '.join(utilities_not_found_list)
        print('\n[!] utilities not found (please install) --> ' + utilities_not_found_text)
        print('\033[?25h')
        sys.exit(1)

#hide writing cursor
print('\033[?25l')
os.system("clear")

#functions
def main():
    time.sleep(1)

    try:
        answer = raw_input("[?] do you want to update it? (y/n) >> ")

    except NameError:
        answer = input("[?] do you want to update it? (y/n) >> ")

    if answer == 'n' or answer == 'no' or answer == 'N' or answer == 'NO':
        print('\n[i] leaving the program...')
        print('\033[?25h')
        sys.exit(0)

    elif answer == 'y' or answer == 'yes' or answer == 'Y' or answer == 'YES':
        time.sleep(1)
        os.system('clear')
        print('[+] updating python...\t\t[' + ' ' * 20 + ']')
        time.sleep(1)

        steps_to_print = ['\n[+] python correctly installed, now processing...', '\n\n[+] extracting files...', '[+] configuring files...', '[+] preparing exportation...', '[+] exporting all files...']
        actual_steps = [download_new_version, extract_files, configure, prepare_export, export]

        printing_line = 2
        first_for = True

        for i in range(5):
            print(steps_to_print[i])
            actual_steps[i]()

            printing_line += 2
            print('\033[' + str(printing_line) +'A[+] updating python...' + '\t\t[' + '====' * i + '>')
            print('\n' * i + '\n' * i)
        


        actual_path = os.getcwd()
        os.system("clear")

        print('\n[+] python was successfuly updated, now you should be able to run lazaro')
        print('\n[+] to execute python with the new version, run "'+ actual_path +'/python"')
        print('\033[?25h')

def download_new_version():
    with open(os.devnull, 'wb') as devnull:
        subprocess.call('wget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz', stderr=devnull, shell=True)

def extract_files():
    with open(os.devnull, 'wb') as devnull:
        subprocess.call('tar -xzf Python-3.11.6.tgz', stdout=devnull, stderr=devnull, shell=True)
        subprocess.call('rm Python-3.11.6.tgz -rf', stdout=devnull, stderr=devnull, shell=True)
        subprocess.call('mv Python-3.11.6 new_python_version', stdout=devnull, stderr=devnull, shell=True)

    os.chdir('new_python_version')

def configure():
    with open(os.devnull, 'wb') as devnull:
         subprocess.call('./configure --prefix=$HOME/python --enable-optimizations', stdout=devnull, stderr=devnull, shell=True)

def prepare_export():
    nproc = os.popen("nproc > /dev/null").read()
                        
    with open(os.devnull, 'wb') as devnull:
        subprocess.call('make -j' + nproc, stdout=devnull, stderr=devnull, shell=True)

def export():
    with open(os.devnull, 'wb') as devnull:
        subprocess.call('make install', stdout=devnull, stderr=devnull, shell=True)


#main
python_version = subprocess.check_output(['python', '--version'], stderr=subprocess.STDOUT, universal_newlines = True).strip().split(' ').pop(-1)
print("[+] actual python version: " + python_version); python_version = python_version.split('.') 
time.sleep(1)

if len(python_version) == 1:
    python_version.append('0')

if int(python_version[0]) < 3:
    print('\n[!] lazaro is not aviable for your actual python version\n')
    main()

elif int(python_version[1]) <= 5 and int(python_version[0]) <= 3:
    print('\n[!] lazaro is not aviable for your actual python version\n')
    main()

else:
    print('\n[+] your version of python is perfectly fine, and lazaro should be working perfectly fine')
    print('\033[?25h')
    sys.exit(0)
